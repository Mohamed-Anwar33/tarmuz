const Contact = require('../models/Contact');
const sendEmail = require('../utils/email');
const Settings = require('../models/Settings');

const clean = (v) => String(v || '').trim();
const isEmail = (v) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(String(v || ''));
const stripControl = (v) => String(v || '').replace(/[\r\n\t\0]/g, ' ');

// Submit contact form
exports.submitContact = async (req, res) => {
  try {
    const name = clean(req.body.name);
    const email = clean((req.body.email || '').toLowerCase());
    const phone = clean(req.body.phone);
    const rawMessage = req.body.message ?? req.body.msg ?? req.body.content ?? req.body.description ?? '';
    const message = clean(rawMessage).replace(/\s+/g, ' ');

    if (!name || name.length < 2 || name.length > 80) {
      return res.status(400).json({ msg: 'Invalid name' });
    }
    if (email && (!isEmail(email) || email.length > 254)) {
      return res.status(400).json({ msg: 'Invalid email' });
    }
    if (!message || message.length < 2 || message.length > 2000) {
      return res.status(400).json({ msg: 'Invalid message' });
    }

    const doc = new Contact({ name, email, phone, message, status: 'new' });
    await doc.save();

    const safeSubject = stripControl('New Contact');
    const safeBody = stripControl(`Name: ${name}\nEmail: ${email}\nPhone: ${phone}\nMessage: ${message}`);
    const html = `
      <div style="font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;max-width:600px;margin:auto;background:#ffffff;border:1px solid #eee;border-radius:8px;overflow:hidden">
        <div style="background:#111827;color:#fff;padding:16px 20px;font-weight:600;font-size:16px">New Contact Message</div>
        <div style="padding:20px">
          <table cellspacing="0" cellpadding="0" style="width:100%;border-collapse:collapse">
            <tr>
              <td style="padding:8px 0;color:#6b7280;width:120px">Name</td>
              <td style="padding:8px 0;color:#111827;font-weight:600">${name || '-'}</td>
            </tr>
            <tr>
              <td style="padding:8px 0;color:#6b7280">Email</td>
              <td style="padding:8px 0;color:#111827">${email || '-'}</td>
            </tr>
            <tr>
              <td style="padding:8px 0;color:#6b7280">Phone</td>
              <td style="padding:8px 0;color:#111827">${phone || '-'}</td>
            </tr>
          </table>
          <div style="margin-top:16px;padding-top:12px;border-top:1px solid #eee;color:#6b7280">Message</div>
          <div style="white-space:pre-wrap;font-family:inherit;color:#111827;line-height:1.6;margin-top:8px">${message || '-'}</div>
        </div>
        <div style="background:#f9fafb;color:#6b7280;padding:12px 20px;font-size:12px">This email was generated by the contact form.</div>
      </div>`;
    // Resolve recipient: Settings.contactRecipient -> EMAIL_TO -> EMAIL_USER
    const settings = await Settings.findOne();
    const recipient = (settings?.contactRecipient || process.env.EMAIL_TO || process.env.EMAIL_USER || '').trim();
    if (recipient) {
      try {
        await sendEmail(recipient, safeSubject, safeBody, html, email || undefined);
      } catch (mailErr) {
        console.warn('[MAIL] Failed to send contact email:', mailErr?.message || mailErr);
        // Continue; do not fail the request if email dispatch fails
        return res.status(201).json({ msg: 'Message received (email pending)' });
      }
    }
    res.status(201).json({ msg: 'Message sent' });
  } catch (err) {
    res.status(500).json({ msg: 'Internal server error' });
  }
};

// Get all contacts (admin only)
exports.getContacts = async (req, res) => {
  try {
    const contacts = await Contact.find().sort({ createdAt: -1 });
    res.json(contacts);
  } catch (err) {
    res.status(500).json({ msg: 'Internal server error' });
  }
};

// Get single contact
exports.getContact = async (req, res) => {
  try {
    const contact = await Contact.findById(req.params.id);
    if (!contact) {
      return res.status(404).json({ msg: 'Contact not found' });
    }
    res.json(contact);
  } catch (err) {
    res.status(500).json({ msg: 'Internal server error' });
  }
};

// Delete contact
exports.deleteContact = async (req, res) => {
  try {
    const contact = await Contact.findByIdAndDelete(req.params.id);
    if (!contact) {
      return res.status(404).json({ msg: 'Contact not found' });
    }
    res.json({ msg: 'Contact deleted successfully' });
  } catch (err) {
    res.status(500).json({ msg: 'Internal server error' });
  }
};

// Update contact status (mark as read/replied)
exports.updateContactStatus = async (req, res) => {
  try {
    const allowed = new Set(['new', 'read', 'replied', 'archived']);
    const status = clean(req.body.status).toLowerCase();
    if (!allowed.has(status)) {
      return res.status(400).json({ msg: 'Invalid status' });
    }
    const contact = await Contact.findByIdAndUpdate(
      req.params.id,
      { status, updatedAt: Date.now() },
      { new: true }
    );
    if (!contact) {
      return res.status(404).json({ msg: 'Contact not found' });
    }
    res.json(contact);
  } catch (err) {
    res.status(500).json({ msg: 'Internal server error' });
  }
};